#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <dt-bindings/zmk/matrix_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    chosen { zmk,matrix-transform = &imprint_three_row; };

    // Custom transform that maps only the three main rows plus thumb keys used by the
    // current layout, skipping the unused function and number rows from the stock Imprint.
    imprint_three_row: keymap_transform_3row {
        compatible = "zmk,matrix-transform";
        columns = <8>;
        rows = <14>;
        map = <
RC(4,5) RC(4,4) RC(4,3) RC(4,2) RC(4,1) RC(4,0)                           RC(11,0) RC(11,1) RC(11,2) RC(11,3) RC(11,4) RC(11,5)
RC(3,5) RC(3,4) RC(3,3) RC(3,2) RC(3,1) RC(3,0)                           RC(10,0) RC(10,1) RC(10,2) RC(10,3) RC(10,4) RC(10,5)
RC(2,5) RC(2,4) RC(2,3) RC(2,2) RC(2,1) RC(2,0)                           RC(9,0)  RC(9,1)  RC(9,2)  RC(9,3)  RC(9,4)  RC(9,5)
                RC(1,3) RC(1,2)                                                             RC(8,2)  RC(8,3)
                                    RC(0,3) RC(0,2) RC(0,1)   RC(7,1) RC(7,2) RC(7,3)
                                    RC(0,7) RC(0,6) RC(0,5)   RC(7,5) RC(7,6) RC(7,7)
        >;
    };

    keymap {
        compatible = "zmk,keymap";

        l0_layer {
            bindings = <
&kp ESC        &kp Q  &kp W     &kp E     &kp R         &kp T                   &kp Y      &kp U      &kp I         &kp O     &kp P     &kp BSPC
&mt LCTRL TAB  &kp A  &kp S     &kp D     &kp F         &kp G                   &kp H      &kp J      &kp K         &kp L     &kp SEMI  &kp SQT
&kp LSHFT      &kp Z  &kp X     &kp C     &kp V         &kp B                   &kp N      &kp M      &kp COMMA     &kp DOT   &kp FSLH  &kp RSHFT
                      &kp LGUI  &kp LALT                                                              &kp LBKT      &kp RBKT
                                          &mo 1         &mo 2      &mkp LCLK    &mkp LCLK  &mo 2      &mo 1
                                          &mt LCMD RET  &kp SPACE  &mkp RCLK    &mkp RCLK  &kp SPACE  &mt RCMD RET
            >;
        };

        l1_Layer {
            bindings = <
&trans  &kp EXCL   &kp AT     &kp HASH  &kp DLLR  &kp PRCNT            &kp CARET  &kp AMPS  &kp ASTRK  &kp LS(N9)  &kp LS(N0)     &trans
&trans  &kp UNDER  &kp PLUS   &kp PIPE  &kp DQT   &kp LBKT             &kp LEFT   &kp DOWN  &kp UP     &kp RIGHT   &kp LS(GRAVE)  &trans
&trans  &kp MINUS  &kp EQUAL  &kp BSLH  &kp SQT   &kp RBKT             &kp RBRC   &kp LBRC  &kp LT     &kp GT      &kp GRAVE      &trans
                   &trans     &trans                                                        &trans     &trans
                                        &trans    &mo 2      &trans    &trans     &mo 2     &trans
                                        &trans    &trans     &trans    &trans     &trans    &trans
            >;
        };

        l2_Layer {
            bindings = <
&trans  &kp N1      &kp N2      &kp N3      &kp N4        &kp N5                  &kp N6  &kp N7     &kp N8     &kp N9  &kp N0  &trans
&trans  &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &kp LG(N4)    &kp LG(N5)              &trans  &kp PG_DN  &kp PG_UP  &trans  &trans  &trans
&trans  &kp CAPS    &trans      &kp C_MUTE  &kp C_VOL_UP  &kp C_VOL_DN            &trans  &trans     &trans     &trans  &trans  &trans
                    &trans      &trans                                                               &trans     &trans
                                            &trans        &mo 3         &trans    &trans  &mo 3      &trans
                                            &trans        &trans        &trans    &trans  &trans     &trans
            >;
        };

        l3_Layer {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4              &bt BT_CLR  &trans       &trans  &trans   &trans   &trans
&trans  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5                    &kp F6      &kp F7       &kp F8  &kp F9   &kp F10  &trans
&trans  &trans        &trans        &trans        &trans        &studio_unlock            &sys_reset  &bootloader  &trans  &kp F11  &kp F12  &trans
                      &trans        &trans                                                                         &trans  &trans
                                                  &trans        &mo 4           &trans    &trans      &mo 4        &trans
                                                  &trans        &trans          &trans    &trans      &trans       &trans
            >;
        };

        l4_Layer {
            bindings = <
&kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9            &kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5
&kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp N1            &kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7
&kp N8  &kp N9  &kp N0  &kp N1  &kp N2  &kp N3            &kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9
                &kp N2  &kp N3                                            &kp N7  &kp N8
                                &kp N1  &kp N2  &kp N3    &kp N4  &kp N5  &kp N6
                                &kp N7  &kp N8  &kp N9    &kp N0  &kp N1  &kp N2
            >;
        };
    };
};

// right hand trackball configuration
// &trackball_peripheral_listener {
//    input-processors =
//     activate layer 3 within 500ms of the trackball moving
//     <&zip_temp_layer 3 500>;
// };
//left hand trackball configuration

&trackball_central_listener {
    input-processors =
        // multiply sensitivity by 1, divide by 3 (make it slower for scrolling),,
        <&zip_xy_scaler 1 3>,
        // make this trackball output scrolling events by default instead of cursor movement,,
        <&zip_xy_to_scroll_mapper>,
        // invert vertical scrolling so that the view moves in the same direction as the top of the trackball.,,
        <&zip_scroll_transform INPUT_TRANSFORM_Y_INVERT>;
};
